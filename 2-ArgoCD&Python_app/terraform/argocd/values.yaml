## Argo CD Helm chart values
global:
  image:
    tag: v2.9.3
  securityContext:
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999

# Server configurations
server:
  extraArgs:
    - --insecure # Disable strict TLS verification for git repos (not server security)
  
  # TLS configuration will be managed by our deployment script instead
  # to avoid duplicate mount paths
  
  # Optional node selection - if nodes with these labels exist
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: role
            operator: In
            values:
            - management
  
  # Make tolerations more flexible
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "management"
      effect: "NoSchedule"
    - key: "dedicated"
      operator: "Exists"
      effect: "NoSchedule"

  # Use the custom admin password secret - this is now using base64 encoding
  admin:
    enabled: true
    passwordSecret:
      name: ${admin_password_secret_name}
      key: password
    createSecret: false

  # Configure the server's resources
  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  # Optional RBAC configuration for users
  rbacConfig:
    policy.csv: |
      # Basic RBAC policy
      g, admin, role:admin
      g, reader, role:readonly

      # Add custom roles as needed
      g, deployer, role:deployer

    # Define a custom role with specific permissions
    policy.default: role:readonly
    scopes: "[groups, preferred_username]"

# Configure repository server
repoServer:
  # Optional node selection - if nodes with these labels exist
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: role
            operator: In
            values:
            - management
  
  # Make tolerations more flexible
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "management"
      effect: "NoSchedule"
    - key: "dedicated"
      operator: "Exists"
      effect: "NoSchedule"

  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Configure application controller
controller:
  # Optional node selection - if nodes with these labels exist
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: role
            operator: In
            values:
            - management
  
  # Make tolerations more flexible
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "management"
      effect: "NoSchedule"
    - key: "dedicated"
      operator: "Exists"
      effect: "NoSchedule"

  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 256Mi

# Configure Redis for caching
redis:
  # Optional node selection - if nodes with these labels exist
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: role
            operator: In
            values:
            - management
  
  # Make tolerations more flexible
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "management"
      effect: "NoSchedule"
    - key: "dedicated"
      operator: "Exists"
      effect: "NoSchedule"

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Configure applicationset controller
applicationSet:
  # Optional node selection - if nodes with these labels exist
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: role
            operator: In
            values:
            - management
  
  # Make tolerations more flexible
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "management"
      effect: "NoSchedule"
    - key: "dedicated"
      operator: "Exists"
      effect: "NoSchedule"

# Configure dex server
dex:
  # Optional node selection - if nodes with these labels exist
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: role
            operator: In
            values:
            - management
  
  # Make tolerations more flexible
  tolerations:
    - key: "dedicated"
      operator: "Equal"
      value: "management"
      effect: "NoSchedule"
    - key: "dedicated"
      operator: "Exists"
      effect: "NoSchedule"

# Configure initial repositories
configs:
  repositories:
    # Add your Git repositories here
    my-private-repo:
      url: https://github.com/example/private-repo.git
      type: git

  # Configure SSO credentials if needed
  # dex.config: |
  #   connectors:
  #     - type: github
  #       id: github
  #       name: GitHub
  #       config:
  #         clientID: <your-client-id>
  #         clientSecret: <your-client-secret>
  #         orgs:
  #           - name: your-org-name

# Configure resource customizations
resourceCustomizations:
  # Add custom health checks or resource handling
  health.lua: |
    health_status = {}
    if obj.status ~= nil then
      if obj.status.conditions ~= nil then
        for i, condition in ipairs(obj.status.conditions) do
          if condition.type == "Ready" and condition.status == "True" then
            health_status.status = "Healthy"
            health_status.message = condition.message
            return health_status
          end
        end
      end
    end
    health_status.status = "Progressing"
    health_status.message = "Waiting for resource to become Ready"
    return health_status











